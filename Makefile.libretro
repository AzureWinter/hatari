CORE_DIR := .
LIBRETRO_DIR = $(CORE_DIR)/libretro
ZLIB_DIR = $(LIBRETRO_DIR)/utils/zlib

ifeq ($(platform),)
platform = unix
ifeq ($(shell uname -a),)
   platform = win
else ifneq ($(findstring MINGW,$(shell uname -a)),)
   platform = win
else ifneq ($(findstring Darwin,$(shell uname -a)),)
   platform = osx
else ifneq ($(findstring win,$(shell uname -a)),)
   platform = win
endif
endif

ifeq ($(platform), android)
   CC = arm-linux-androideabi-gcc
   AR = @arm-linux-androideabi-ar
   LD = @arm-linux-androideabi-g++ 
   TARGET := libretro-hatari.so
   fpic := -fPIC
   SHARED :=  -Wl,--fix-cortex-a8 -llog -lz -shared -Wl,--version-script=$(LIBRETRO_DIR)/link.T -Wl,--no-undefined
   PLATFLAGS := -DAND -DLSB_FIRST -DALIGN_DWORD  -D__LIBRETRO__
else ifeq ($(platform), unix)
   CC = gcc
   TARGET := libretro-hatari.so
   fpic := -fPIC
   SHARED :=  -lz -lpthread -shared -Wl,--version-script=$(LIBRETRO_DIR)/link.T -Wl,--no-undefined
   PLATFLAGS := -DLSB_FIRST -DALIGN_DWORD  -D__LIBRETRO__
else ifeq ($(platform), osx)
   TARGET := libretro.dylib
   fpic := -fPIC
   SHARED := -dynamiclib
   PLATFLAGS := -DLSB_FIRST -DALIGN_DWORD  -D__LIBRETRO__
else ifeq ($(platform), wii)
   TARGET := hatari_libretro_wii.a
   CC = $(DEVKITPPC)/bin/powerpc-eabi-gcc$(EXE_EXT)
   CXX = $(DEVKITPPC)/bin/powerpc-eabi-g++$(EXE_EXT)
   AR = $(DEVKITPPC)/bin/powerpc-eabi-ar$(EXE_EXT)   
   CFLAGS += -DSDL_BYTEORDER=SDL_BIG_ENDIAN -DMSB_FIRST -DBYTE_ORDER=BIG_ENDIAN  -DBYTE_ORDER=BIG_ENDIAN \
	-DHAVE_MEMALIGN -DHAVE_ASPRINTF -I$(ZLIB_DIR) -I$(DEVKITPRO)/libogc/include \
	-D__powerpc__ -D__POWERPC__ -DGEKKO -DHW_RVL -mrvl -mcpu=750 -meabi -mhard-float -D__ppc__
   SHARED :=   -lm -lpthread -lc
   PLATFLAGS :=  -D__LIBRETRO__ -DALIGN_DWORD
else ifeq ($(platform), ps3)
   TARGET := hatari_libretro_ps3.a
   CC = $(CELL_SDK)/host-win32/ppu/bin/ppu-lv2-gcc.exe
   CXX = $(CELL_SDK)/host-win32/ppu/bin/ppu-lv2-g++.exe
   AR = $(CELL_SDK)/host-win32/ppu/bin/ppu-lv2-ar.exe
   SHARED :=   -lm -lpthread -lc
   CFLAGS += -DSDL_BYTEORDER=SDL_BIG_ENDIAN -DMSB_FIRST -DBYTE_ORDER=BIG_ENDIAN  -DBYTE_ORDER=BIG_ENDIAN \
	-D__CELLOS_LV2 -DHAVE_MEMALIGN -DHAVE_ASPRINTF -I$(ZLIB_DIR) 
   PLATFLAGS :=  -D__LIBRETRO__ -DALIGN_DWORD 
else
   #CC = i586-mingw32msvc-gcc
   CC = x86_64-w64-mingw32-gcc
   PLATFLAGS :=  -D__LIBRETRO__ -DLSB_FIRST -DALIGN_DWORD -DWIN32PORT -DWIN32
   TARGET := hatari_libretro.dll
   SHARED := -shared -static-libgcc -s -Wl,--version-script=$(LIBRETRO_DIR)/link.T -Wl,--no-undefined 
endif

ifeq ($(DEBUG), 1)
   CFLAGS += -O0 -g
else
   CFLAGS += -O3
endif

CFLAGS += \
	-std=gnu99 -finline-functions -funroll-loops  -fsigned-char  \
	-Wno-strict-prototypes -ffast-math -fomit-frame-pointer -fno-strength-reduce  -fno-builtin -finline-functions -s

CXXFLAGS  +=	$(CFLAGS) -std=gnu++0x
CPPFLAGS += $(CFLAGS)

#START COMMON PART

EMU = $(CORE_DIR)/src
CPU = $(EMU)/uae-cpu
FALCON = $(EMU)/falcon
DBG = $(EMU)/debug
FLP = $(EMU)
GUI = $(LIBRETRO_DIR)/gui-retro
CPU_PREGEN = $(LIBRETRO_DIR)/uae-cpu-pregen
LIBCOOBJ = $(LIBRETRO_DIR)/utils/libco
LIBUTILS = $(LIBRETRO_DIR)/utils

INCFLAGS := -I$(EMU)  -I$(CPU)  -I$(FALCON) -I$(EMU)/includes -I$(DBG) -I$(FLP) \
	-I$(LIBRETRO_DIR) -I$(LIBRETRO_DIR)/libretro-sdk/include -I$(LIBRETRO_DIR)/include -I$(LIBUTILS) -I$(CPU_PREGEN)

ZLIB_SRCS	:= $(ZLIB_DIR)/adler32.c \
	$(ZLIB_DIR)/compress.c \
	$(ZLIB_DIR)/crc32.c \
	$(ZLIB_DIR)/deflate.c \
	$(ZLIB_DIR)/gzclose.c \
	$(ZLIB_DIR)/gzlib.c \
	$(ZLIB_DIR)/gzread.c \
	$(ZLIB_DIR)/gzwrite.c \
	$(ZLIB_DIR)/infback.c \
	$(ZLIB_DIR)/inffast.c \
	$(ZLIB_DIR)/inflate.c \
	$(ZLIB_DIR)/trees.c \
	$(ZLIB_DIR)/inftrees.c \
	$(ZLIB_DIR)/uncompr.c \
	$(ZLIB_DIR)/zutil.c 

SOURCES_C += $(CPU_PREGEN)/cpudefs.c \
$(CPU_PREGEN)/cpuemu.c \
$(CPU_PREGEN)/cpustbl.c \
$(CPU)/hatari-glue.c \
$(CPU)/memory.c \
$(CPU)/newcpu.c \
$(CPU)/readcpu.c \
$(CPU)/fpp.c

SOURCES_C += $(GUI)/dlgAbout.c \
$(GUI)/dlgAlert.c \
$(GUI)/dlgDevice.c \
$(GUI)/dlgFileSelect.c \
$(GUI)/dlgFloppy.c \
$(GUI)/dlgHardDisk.c \
$(GUI)/dlgJoystick.c \
$(GUI)/dlgKeyboard.c \
$(GUI)/dlgMain.c \
$(GUI)/dlgMemory.c \
$(GUI)/dlgNewDisk.c \
$(GUI)/dlgRom.c \
$(GUI)/dlgScreen.c \
$(GUI)/dlgSound.c \
$(GUI)/dlgSystem.c \
$(GUI)/sdlgui.c

SOURCES_C += $(FALCON)/crossbar.c \
$(FALCON)/dsp.c \
$(FALCON)/dsp_core.c \
$(FALCON)/dsp_cpu.c \
$(FALCON)/dsp_disasm.c \
$(FALCON)/hostscreen.c \
$(FALCON)/microphone.c \
$(FALCON)/nvram.c \
$(FALCON)/videl.c

SOURCES_C += $(DBG)/log.c \
$(DBG)/debugui.c \
$(DBG)/breakcond.c \
$(DBG)/debugcpu.c \
$(DBG)/debugInfo.c \
$(DBG)/debugdsp.c \
$(DBG)/evaluate.c \
$(DBG)/history.c \
$(DBG)/symbols.c \
$(DBG)/profile.c \
$(DBG)/profilecpu.c \
$(DBG)/profiledsp.c \
$(DBG)/natfeats.c \
$(DBG)/console.c \
$(DBG)/68kDisass.c

SOURCES_C += $(FLP)/createBlankImage.c \
$(FLP)/dim.c \
$(FLP)/msa.c \
$(FLP)/st.c \
$(FLP)/zip.c

SOURCES_C += $(EMU)/acia.c \
$(EMU)/audio.c \
$(EMU)/avi_record.c \
$(EMU)/bios.c \
$(EMU)/blitter.c \
$(EMU)/cart.c \
$(EMU)/cfgopts.c \
$(EMU)/clocks_timings.c \
$(EMU)/configuration.c \
$(EMU)/options.c \
$(EMU)/change.c \
$(EMU)/control.c \
$(EMU)/cycInt.c \
$(EMU)/cycles.c \
$(EMU)/dialog.c \
$(EMU)/dmaSnd.c \
$(EMU)/fdc.c \
$(EMU)/file.c \
$(EMU)/floppy.c \
$(EMU)/floppy_ipf.c \
$(EMU)/floppy_stx.c \
$(EMU)/gemdos.c \
$(EMU)/hd6301_cpu.c \
$(EMU)/hdc.c \
$(EMU)/ide.c \
$(EMU)/ikbd.c \
$(EMU)/ioMem.c \
$(EMU)/ioMemTabST.c \
$(EMU)/ioMemTabSTE.c \
$(EMU)/ioMemTabTT.c \
$(EMU)/ioMemTabFalcon.c \
$(EMU)/joy.c \
$(EMU)/keymap.c \
$(EMU)/m68000.c \
$(EMU)/main.c \
$(EMU)/midi.c \
$(EMU)/memorySnapShot.c \
$(EMU)/mfp.c \
$(EMU)/paths.c \
$(EMU)/psg.c \
$(EMU)/printer.c \
$(EMU)/resolution.c \
$(EMU)/rs232.c \
$(EMU)/reset.c \
$(EMU)/rtc.c \
$(EMU)/scandir.c \
$(EMU)/stMemory.c \
$(EMU)/screen.c \
$(EMU)/screenSnapShot.c \
$(EMU)/shortcut.c \
$(EMU)/sound.c \
$(EMU)/spec512.c \
$(EMU)/statusbar.c \
$(EMU)/str.c \
$(EMU)/tos.c \
$(EMU)/unzip.c \
$(EMU)/utils.c \
$(EMU)/vdi.c \
$(EMU)/video.c \
$(EMU)/wavFormat.c \
$(EMU)/xbios.c \
$(EMU)/ymFormat.c

SOURCES_C += $(LIBRETRO_DIR)/libretro-sdk/libco/libco.c \
				 $(LIBRETRO_DIR)/libretro.c \
				 $(LIBRETRO_DIR)/hatari-mapper.c \
				 $(LIBRETRO_DIR)/vkbd.c \
				 $(LIBRETRO_DIR)/graph.c \
				 $(LIBRETRO_DIR)/bmp.c

BUILD_APP =  $(ZLIB_SRCS) $(SOURCES_C)


OBJECTS := $(BUILD_APP:.c=.o)

#END COMMON PART 

all: $(TARGET)

ifeq ($(platform), wii)
$(TARGET): $(OBJECTS) 
	$(AR) rcs $@ $(OBJECTS) 
else ifeq ($(platform), ps3)
$(TARGET): $(OBJECTS) 
	$(AR) rcs $@ $(OBJECTS) 

else ifeq ($(platform), win)
$(TARGET): $(OBJECTS)
	$(CC) $(fpic) $(SHARED) $(INCLUDES) -o $@ $(OBJECTS)  -lm -lz
else ifeq ($(platform), android)
$(TARGET): $(OBJECTS)
	$(CC) $(fpic) $(SHARED) $(INCLUDES) -o $@ $(OBJECTS)  -lm -lz
else
$(TARGET): $(OBJECTS)
	$(CC) $(fpic) $(SHARED) $(INCLUDES) -o $@ $(OBJECTS)  -lm -lz -lpthread

endif

%.o: %.c
	$(CC) $(fpic) $(CFLAGS) $(PLATFLAGS) $(INCFLAGS) -c -o $@ $<

clean:
	rm -f $(OBJECTS) $(TARGET) 

.PHONY: clean

